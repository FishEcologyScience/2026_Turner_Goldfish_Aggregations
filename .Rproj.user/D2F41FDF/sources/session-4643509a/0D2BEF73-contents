#ideas and quick run throughs of some data analysis goldfish aggregation data carrolls bay April 2025

#multiple dataframes 
#1. Occurances of goldfish/goldfish aggregations 
#2. transect sampling details
#3. also the weight/length and batch data (likely not applicable here)

#whats in each dataframe?
#1. occurances, presences only of goldfish with transect,lat/lon
#if an "aggregation was determined to be present, extra water quality info was recorded
#including temp, DO, turbidity, water depth

#2. transect sampling details
#efishing setting details
#water quality at the start or end of the transect (was not standardized), including
#temp, DO, conductivity, turbidity, pH, and a depth value

#things that need to be fixed
#1. depth, wasnt always taken and could vary between the start and end of the transect
#thinking about just using the bathy layer Jon has to assign depths to transects and aggregation points


#QUESTION
#using telemetry data we were able to focus efforts into a specific area during a specific time period
#this deemed successful as aggregations of goldfish were found and we were able to remove 
sum(Aggdata_June52025$`Number missed`, na.rm = TRUE)
#TOTAL=787 goldfish
#number captured = 642
#number missed = 145
#also likely more that were missed that were not counted due to poor water clarity 

# to put into perspective, we removed MORE adult goldfish (in 4 days) than RBG removed at the fishway in 
#both 2022 and 2023 (567 total)



#####
#things we need to add to the dataset. 
#1. distance to shoreline 
#2. distance to rivermouth

#1. Gathering a distance to shoreline variable for each goldfish occurance 

# Load required libraries
library(sf)
library(dplyr)
library(units)

# Assuming your data is already loaded:
# points_data <- your point dataset (sf object)
# shoreline_polygon <- your shoreline polygon (sf object)
# river_mouths <- your river mouth points (sf object)

# Make sure all data has the same CRS (coordinate reference system)
# Check CRS
GF_locs <- st_as_sf(Aggdata_June52025, coords = c("Lon", "Lat"), crs = 4326)

st_crs(GF_locs)
st_crs(shorelinemap)

# ===============================
# 1. Distance to Shoreline
# ===============================

# Convert shoreline polygon to boundary
shoreline_boundary <- st_boundary(shorelinemap)
# Calculate distance from points to shoreline boundary
dist_to_shore <- st_distance(GF_locs, shoreline_boundary)
# Extract distances
GF_locs$dist_to_shoreline_m <- as.numeric(dist_to_shore[,1])

# ===============================
# 2. Distance to River Mouth
# ===============================

# Option A: If you have river mouth points already
river_mouths <- st_transform(river_mouths, crs = target_crs)

# Calculate distance to nearest river mouth for each point
dist_to_river <- st_distance(points_data, river_mouths)

# Find minimum distance to any river mouth for each point
points_data$dist_to_river_mouth_m <- apply(dist_to_river, 1, min)
points_data$dist_to_river_mouth_km <- points_data$dist_to_river_mouth_m / 1000

# Option B: If you need to create river mouth points from river lines
# (assuming you have river network data)
# river_lines <- your river line data

# Find river mouths by identifying river endpoints near coastline
# This is more complex - here's a simplified approach:
# river_endpoints <- st_cast(river_lines, "POINT") %>%
#   slice(c(1, n())) %>%  # get start and end points of each line
#   # Filter those near shoreline (within some threshold)
#   filter(st_distance(., shoreline_polygon) < units::set_units(1000, "m"))
